#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è API –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
"""

import requests
import json
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv('/app/frontend/.env')

# Get backend URL from environment
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://psycentr.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

print(f"üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞: {API_BASE}")
print("=" * 70)

def test_get_programs():
    """–¢–µ—Å—Ç GET /api/programs - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 6 –ø—Ä–æ–≥—Ä–∞–º–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ image_url –∏–∑ Unsplash"""
    print("\n=== 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/programs ===")
    try:
        response = requests.get(f"{API_BASE}/programs")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            programs = response.json()
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º: {len(programs)}")
            
            if len(programs) >= 6:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(programs)} –ø—Ä–æ–≥—Ä–∞–º–º (–æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 6)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º image_url –Ω–∞ Unsplash
                unsplash_count = 0
                for i, program in enumerate(programs):
                    image_url = program.get('image_url', '')
                    if image_url.startswith('https://images.unsplash.com'):
                        unsplash_count += 1
                    print(f"  –ü—Ä–æ–≥—Ä–∞–º–º–∞ {i+1}: {program.get('title', 'N/A')}")
                    print(f"    Image URL: {image_url}")
                
                if unsplash_count == len(programs):
                    print(f"‚úÖ –í—Å–µ {len(programs)} –ø—Ä–æ–≥—Ä–∞–º–º –∏–º–µ—é—Ç image_url –∏–∑ Unsplash")
                else:
                    print(f"‚ö†Ô∏è –¢–æ–ª—å–∫–æ {unsplash_count} –∏–∑ {len(programs)} –ø—Ä–æ–≥—Ä–∞–º–º –∏–º–µ—é—Ç image_url –∏–∑ Unsplash")
                
                return True, programs[0]['id'] if programs else None
            else:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(programs)} –ø—Ä–æ–≥—Ä–∞–º–º, –æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 6")
                return False, None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False, None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False, None

def test_get_blog():
    """–¢–µ—Å—Ç GET /api/blog - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –±–ª–æ–≥-–ø–æ—Å—Ç—ã"""
    print("\n=== 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/blog ===")
    try:
        response = requests.get(f"{API_BASE}/blog")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            posts = response.json()
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–≥-–ø–æ—Å—Ç–æ–≤: {len(posts)}")
            
            if posts:
                print("‚úÖ –ë–ª–æ–≥-–ø–æ—Å—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:")
                for i, post in enumerate(posts[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"  {i+1}. {post.get('title', 'N/A')}")
                    print(f"     –ê–≤—Ç–æ—Ä: {post.get('author', 'N/A')}")
                    print(f"     –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {post.get('published', 'N/A')}")
                
                return True, posts[0]['id'] if posts else None
            else:
                print("‚ùå –ë–ª–æ–≥-–ø–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False, None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False, None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False, None

def test_admin_login():
    """–¢–µ—Å—Ç POST /api/admin/login —Å {"username": "test", "password": "test"}"""
    print("\n=== 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/admin/login ===")
    
    login_data = {
        "username": "test",
        "password": "test"
    }
    
    try:
        response = requests.post(f"{API_BASE}/admin/login", json=login_data)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if "access_token" in data:
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                print(f"–¢–∏–ø —Ç–æ–∫–µ–Ω–∞: {data.get('token_type', 'N/A')}")
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.get('username', 'N/A')}")
                return True, data["access_token"]
            else:
                print("‚ùå access_token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return False, None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False, None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False, None

def test_get_settings():
    """–¢–µ—Å—Ç GET /api/settings - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞"""
    print("\n=== 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/settings ===")
    try:
        response = requests.get(f"{API_BASE}/settings")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            settings = response.json()
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã:")
            print(f"  –¢–µ–ª–µ—Ñ–æ–Ω: {settings.get('phone', 'N/A')}")
            print(f"  Email: {settings.get('email', 'N/A')}")
            print(f"  –ê–¥—Ä–µ—Å: {settings.get('address', 'N/A')}")
            print(f"  –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {settings.get('work_schedule', 'N/A')}")
            print(f"  VK —Å—Å—ã–ª–∫–∞: {settings.get('vk_link', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            privacy_policy = settings.get('privacy_policy', '')
            if privacy_policy:
                print(f"  –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {len(privacy_policy)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print("  –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_update_program(token, program_id):
    """–¢–µ—Å—Ç PUT /api/programs/{program_id} - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print(f"\n=== 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PUT /api/programs/{program_id} ===")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
    try:
        get_response = requests.get(f"{API_BASE}/programs/{program_id}")
        if get_response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False
        
        current_program = get_response.json()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        updated_program = {
            "type": current_program["type"],
            "title": current_program["title"],
            "description": current_program["description"] + " [–û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ê]",
            "goals": current_program["goals"],
            "age_range": current_program["age_range"],
            "price": current_program["price"],
            "duration": current_program["duration"],
            "faq": current_program["faq"],
            "image_url": current_program["image_url"]
        }
        
        response = requests.put(f"{API_BASE}/programs/{program_id}", 
                              json=updated_program, headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            updated = response.json()
            print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {updated.get('title', 'N/A')}")
            print(f"  –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {'[–û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ê]' in updated.get('description', '')}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            original_program = {
                "type": current_program["type"],
                "title": current_program["title"],
                "description": current_program["description"],
                "goals": current_program["goals"],
                "age_range": current_program["age_range"],
                "price": current_program["price"],
                "duration": current_program["duration"],
                "faq": current_program["faq"],
                "image_url": current_program["image_url"]
            }
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            restore_response = requests.put(f"{API_BASE}/programs/{program_id}", 
                                          json=original_program, headers=headers)
            if restore_response.status_code == 200:
                print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_delete_program_endpoint(token, program_id):
    """–¢–µ—Å—Ç DELETE /api/programs/{program_id} - –ù–ï —É–¥–∞–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"""
    print(f"\n=== 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/programs/{program_id} (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏) ===")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try:
        response_no_auth = requests.delete(f"{API_BASE}/programs/{program_id}")
        print(f"–°—Ç–∞—Ç—É—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response_no_auth.status_code}")
        
        if response_no_auth.status_code in [401, 403]:
            print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (–Ω–æ –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ)
            headers = {"Authorization": f"Bearer {token}"}
            print("‚ÑπÔ∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç DELETE —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)")
            return True
        else:
            print(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –ø–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å: {response_no_auth.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_update_blog_post(token, post_id):
    """–¢–µ—Å—Ç PUT /api/blog/{post_id} - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥-–ø–æ—Å—Ç–∞"""
    print(f"\n=== 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PUT /api/blog/{post_id} ===")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π
        get_response = requests.get(f"{API_BASE}/blog")
        if get_response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥-–ø–æ—Å—Ç–æ–≤")
            return False
        
        posts = get_response.json()
        if not posts:
            print("‚ùå –ë–ª–æ–≥-–ø–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        current_post = posts[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
        post_id = current_post['id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        updated_post = {
            "title": current_post["title"] + " [–û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ê]",
            "slug": current_post["slug"],
            "excerpt": current_post["excerpt"],
            "content": current_post["content"],
            "author": current_post["author"],
            "tags": current_post["tags"],
            "image_url": current_post["image_url"],
            "published": current_post["published"]
        }
        
        response = requests.put(f"{API_BASE}/blog/{post_id}", 
                              json=updated_post, headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            updated = response.json()
            print("‚úÖ –ë–ª–æ–≥-–ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {updated.get('title', 'N/A')}")
            print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {'[–û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ê]' in updated.get('title', '')}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            original_post = {
                "title": current_post["title"],
                "slug": current_post["slug"],
                "excerpt": current_post["excerpt"],
                "content": current_post["content"],
                "author": current_post["author"],
                "tags": current_post["tags"],
                "image_url": current_post["image_url"],
                "published": current_post["published"]
            }
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            restore_response = requests.put(f"{API_BASE}/blog/{post_id}", 
                                          json=original_post, headers=headers)
            if restore_response.status_code == 200:
                print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_delete_blog_post_endpoint(token, post_id):
    """–¢–µ—Å—Ç DELETE /api/blog/{post_id} - –ù–ï —É–¥–∞–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"""
    print(f"\n=== 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/blog/{post_id} (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏) ===")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try:
        response_no_auth = requests.delete(f"{API_BASE}/blog/{post_id}")
        print(f"–°—Ç–∞—Ç—É—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response_no_auth.status_code}")
        
        if response_no_auth.status_code in [401, 403]:
            print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (–Ω–æ –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ)
            headers = {"Authorization": f"Bearer {token}"}
            print("‚ÑπÔ∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç DELETE —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)")
            return True
        else:
            print(f"‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –ø–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å: {response_no_auth.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    results = {}
    
    # 1. –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º
    programs_success, program_id = test_get_programs()
    results['programs'] = programs_success
    
    # 2. –¢–µ—Å—Ç –±–ª–æ–≥–∞
    blog_success, post_id = test_get_blog()
    results['blog'] = blog_success
    
    # 3. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
    login_success, admin_token = test_admin_login()
    results['admin_login'] = login_success
    
    # 4. –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_success = test_get_settings()
    results['settings'] = settings_success
    
    # –¢–µ—Å—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    if admin_token and program_id:
        # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        update_program_success = test_update_program(admin_token, program_id)
        results['update_program'] = update_program_success
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ DELETE –ø—Ä–æ–≥—Ä–∞–º–º—ã
        delete_program_success = test_delete_program_endpoint(admin_token, program_id)
        results['delete_program_check'] = delete_program_success
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ program_id)")
        results['update_program'] = False
        results['delete_program_check'] = False
    
    if admin_token and post_id:
        # 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥-–ø–æ—Å—Ç–∞
        update_blog_success = test_update_blog_post(admin_token, post_id)
        results['update_blog'] = update_blog_success
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ DELETE –±–ª–æ–≥-–ø–æ—Å—Ç–∞
        delete_blog_success = test_delete_blog_post_endpoint(admin_token, post_id)
        results['delete_blog_check'] = delete_blog_success
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –±–ª–æ–≥–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ post_id)")
        results['update_blog'] = False
        results['delete_blog_check'] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ ({(passed/total)*100:.1f}%)")
    
    print("\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    test_names = {
        'programs': '1. GET /api/programs (–ø—Ä–æ–≤–µ—Ä–∫–∞ Unsplash –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)',
        'blog': '2. GET /api/blog',
        'admin_login': '3. POST /api/admin/login',
        'settings': '4. GET /api/settings',
        'update_program': '5. PUT /api/programs/{id} (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)',
        'delete_program_check': '6. DELETE /api/programs/{id} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)',
        'update_blog': '7. PUT /api/blog/{id} (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)',
        'delete_blog_check': '8. DELETE /api/blog/{id} (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)'
    }
    
    for key, name in test_names.items():
        if key in results:
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if results[key] else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"  {name}: {status}")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã API –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)